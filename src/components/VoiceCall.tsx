import {useEffect, useRef} from 'react'
import {jwtDecode} from 'jwt-decode'
import {useCall} from "../hooks/useCall";

type SignalMessage = {
    type: 'offer' | 'answer' | 'ice'
    offer?: RTCSessionDescriptionInit
    answer?: RTCSessionDescriptionInit
    candidate?: RTCIceCandidateInit
    to: string
    from?: string
}

type JwtPayload = { userId: string }

export default function VoiceCall({ peerId }: { peerId: string }) {
    const socket = useRef<WebSocket | null>(null)
    const peer = useRef<RTCPeerConnection | null>(null)
    const localStream = useRef<MediaStream | null>(null)
    const { endCall } = useCall()

    const token = localStorage.getItem('jwt')
    const currentUserId = token ? jwtDecode<JwtPayload>(token).userId : ''


    useEffect(() => {
        console.log('üîß VoiceCall –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è peerId:', peerId)
        console.log('üîê –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUserId)

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
        socket.current = new WebSocket(`ws://localhost:8080/call/ws?token=${token}`)

        // 2. –°–æ–∑–¥–∞–Ω–∏–µ peer-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        peer.current = new RTCPeerConnection()
        console.log('üì° RTCPeerConnection —Å–æ–∑–¥–∞–Ω')

        // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
        navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
            console.log('üéô –ü–æ–ª—É—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫')
            localStream.current = stream
            stream.getTracks().forEach(track => peer.current!.addTrack(track, stream))
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', err)
        })

        // 4. ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        peer.current.onicecandidate = event => {
            if (event.candidate) {
                console.log('‚ùÑÔ∏è ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω:', event.candidate)
                socket.current?.send(JSON.stringify({
                    type: 'ice',
                    candidate: event.candidate,
                    to: peerId,
                    from: currentUserId
                }))
            }
        }

        // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        peer.current.ontrack = event => {
            console.log('üîà –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª—ë–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ç—Ä–µ–∫')
            const remoteAudio = new Audio()
            remoteAudio.srcObject = event.streams[0]
            remoteAudio.autoplay = true
            remoteAudio.play().catch(err => console.warn('üîá –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ:', err))
        }

        // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
        socket.current.onmessage = async event => {
            const data: SignalMessage = JSON.parse(event.data)
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ WebSocket:', data)

            if (!peer.current) {
                console.warn('‚ö†Ô∏è peer-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', data)
                return
            }

            try {
                if (data.type === 'offer') {
                    console.log('üìû –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from)
                    await peer.current!.setRemoteDescription(new RTCSessionDescription(data.offer!))
                    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω remoteDescription')
                    const answer = await peer.current!.createAnswer()
                    await peer.current!.setLocalDescription(answer)
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ answer')
                    socket.current!.send(JSON.stringify({
                        type: 'answer',
                        answer,
                        to: data.from!,
                        from: currentUserId
                    }))
                }

                if (data.type === 'answer') {
                    console.log('üìû –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from)
                    await peer.current!.setRemoteDescription(new RTCSessionDescription(data.answer!))
                    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω remoteDescription –æ—Ç answer')
                }

                if (data.type === 'ice') {
                    console.log('‚ùÑÔ∏è –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç:', data.from)
                    await peer.current!.addIceCandidate(new RTCIceCandidate(data.candidate!))
                    console.log('‚úÖ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω')
                }
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞:', err)
            }
        }

        // 7. –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞
        socket.current.onopen = async () => {
            console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ')

            if (peerId !== currentUserId) {
                console.log('üöÄ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ –∫:', peerId)
                try {
                    const offer = await peer.current!.createOffer()
                    await peer.current!.setLocalDescription(offer)
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ offer:', offer)
                    socket.current!.send(JSON.stringify({
                        type: 'offer',
                        offer,
                        to: peerId,
                        from: currentUserId
                    }))
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offer:', err)
                }
            } else {
                console.log('‚ö†Ô∏è –°–∞–º–æ–∑–≤–æ–Ω–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            }
        }

        socket.current.onerror = err => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', err)
            console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
        }

        socket.current.onclose = () => {
            console.warn('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
        }

        return () => {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ VoiceCall')
            socket.current?.close()
            peer.current?.close()
            localStream.current?.getTracks().forEach(track => track.stop())
        }
    }, [peerId])

    const endCallHandler = () => {
        console.log('üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞')
        // –û—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
        localStream.current?.getTracks().forEach(track => {
            console.log('üéô –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞:', track.kind)
            track.stop()
        })
        // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        peer.current?.close()
        peer.current = null
        socket.current?.close()
        socket.current = null
        endCall()
    }

    return (
        <div>
            <h2>üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {peerId}</h2>
            <button onClick={endCallHandler} style={{ marginTop: '10px', backgroundColor: '#e74c3c', color: 'white' }}>
                üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
            </button>
        </div>
    )
}
